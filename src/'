enum {
	HIVE_PAIR_BLACK = 1,
	HIVE_PAIR_BLACK_BLACK,
	HIVE_PAIR_BLACK_WHITE,
	HIVE_PAIR_WHITE,
	HIVE_PAIR_WHITE_BLACK,
	HIVE_PAIR_WHITE_WHITE,
};

enum hive_side {
	HIVE_WHITE,
	HIVE_BLACK
};

enum hive_type {
	HIVE_QUEEN,
	HIVE_BEETLE,
	HIVE_GRASSHOPPER,
	HIVE_SPIDER,
	HIVE_ANT,
	HIVE_TYPES,
	HIVE_LADYBUG,
	HIVE_MOSQUITO,
	HIVE_PILLBUG,
};

#define HIVE_VISITED (1 << 0)

typedef struct point {
	int x, y;
} Point;

typedef struct hive_piece {
	uint64_t flags;
	enum hive_side side;
	enum hive_type type;
	Point position;
	union {
		struct {
			struct hive_piece *west, *east;
			struct hive_piece *northWest, *northEast;
			struct hive_piece *southWest, *southEast;
		};
		struct hive_piece *neighbors[6];
	};
} HivePiece;

void hive_piece_render(HivePiece *piece, WINDOW *win, Point t);

typedef struct hive_region {
	WINDOW *win;
	Point translation;
	HivePiece *pieces[22];
	size_t numPieces;
} HiveRegion;

int hive_region_init(HiveRegion *region, int x, int y, int w, int h,
		const HivePiece **pieces, size_t numPieces);
int hive_region_addpiece(HiveRegion *region, HivePiece *piece);
HivePiece *hive_region_pieceat(HiveRegion *region, Point p);
void hive_region_setposition(HiveRegion *region, int x, int y, int w, int h);
void hive_region_clearflag(HiveRegion *region);
uint32_t hive_region_count(HiveRegion *region, HivePiece *origin);
void hive_region_render(HiveRegion *region);

typedef struct hive {
	union {
		struct {
			HiveRegion whiteInventory;
			HiveRegion blackInventory;
			HiveRegion board;
		};
		HiveRegion regions[3];
	};
	HivePiece allPieces[22];
	HivePiece *selectedPiece;
	HiveRegion *selectedRegion;
} Hive;

int hive_init(Hive *hive, int x, int y, int w, int h);
void hive_render(Hive *hive);
int hive_handle(Hive *hive, int c);

